# Importación de módulos de Selenium
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
# Importación de otros módulos
import pyodbc
import pandas as pd
from decouple import config
from datetime import date, timedelta
import locale

# -- Configura las fechas a un formato local en español -- 
""" Esto es importante ya que los nombres de los meses en pemex estan en español."""
locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')

#  ------ Configuración de acceso y conexiona SQL Server ------ 
conn_str = f'DRIVER={config('driver')};SERVER={config('server')};DATABASE={config('database')};UID={config('username')};PWD={config('password')}'
conn = pyodbc.connect(conn_str)
cursor = conn.cursor()

# -- Obtiene la ultima fecha -- 
""" Obtiene la ultima fecha registrada en la tabla de volumen restituido, a partir de esta fecha comenzará a obtener la información en pemex."""
# -- Ejecuta una consulta para obtener la fecha.
cursor.execute("""
        select year(max(Fecha_de_operacion)) as [Year],
        month(max(Fecha_de_operacion)) as [Month],
        day(max(Fecha_de_operacion)) as [Day] 
        from volumen_restituido_petro
    """)
# -- El resultado se guarda en la variable 'resultado'
resultado = cursor.fetchone()
# -- Con la variable resultado se forma la variable 'fecha_inicial'
fecha_inicial = date(resultado.Year, resultado.Month, resultado.Day)
# -- La fecha final se define a partir del dia de actual menos 1 dia. 
fecha_final = date.today() - timedelta(days=1)

# ------ Configuracion selenium ------ 
# -- Se definen las configuraciones del webdriver con la variable 'option'
options = webdriver.ChromeOptions()
# -- El argumento '--headless' desactiva la actualización de pantalla.
# options.add_argument("--headless")
# -- La variable 'service' manda a llamar el webdriver para iniciar el scraping
service = ChromeService(executable_path="C:/Program Files/Google/Chrome/Application/chromedriver.exe")
# -- Con la variable 'driver' se ejecutan todas las acciones a realizar en el scraping.
driver = webdriver.Chrome(service=service, options=options)

# -- Verifica si la tabla cuenta con información y agrega los datos a la tabla de sql.
""" La siguiente funcion tiene como objetivo verificar que al momento de hacer el rascado de la tabla,
    esta cuente con datos. Cuando la tabla no cuenta con datos termina la ejecucion del codigo,
    en caso contrario agrega los datos a la tabla de Sql"""

def verificar_elemento():
    # -- Valida la existencia del XPATH de no informacion en la tabla.
    if driver.find_elements(By.XPATH, "//b[text()='No se encontró información']"):
        # -- Si existe pasa
        pass
    else:
        # -- Si no existe continua con el codigo.
        # -- Busca el XPATH donde se encuentra la tabla de volumen restituido.
        datos_de_tabla_volumenrestituido = driver.find_element(By.XPATH,"//form[@action='/portal/sccli040/controlador']/following-sibling::table[1]")
        # -- Obtener datos de la tabla y dividirlos en filas y columnas
        filas = datos_de_tabla_volumenrestituido.find_elements(By.TAG_NAME, 'tr')
        # -- Se asume que la primera fila contiene encabezados
        columnas = filas[0].find_elements(By.TAG_NAME, 'th')  
        # Crear un DataFrame de pandas con los datos de la tabla
        data = []
        for fila in filas[1:]:
            celdas = fila.find_elements(By.TAG_NAME, 'td')
            fila_data = [celda.text for celda in celdas]
            data.append(fila_data)

        # -- Crea un dataframe con los datos obtenidos del rascado y los guarda en la variable 'df'
        df = pd.DataFrame(data, columns=[celda.text for celda in columnas])
        # -- Se descartan las dos ultimas filas ya que no contienen informacion
        df = df.iloc[:-2]

        # -- Se crea una lista con los nombres de los encabezados de las columnas.
        nombres_columnas_df = df.columns.tolist()

        # -- Se crea un diccionario con los nombres de las columnas del DataFrame y el nombre que deben de llevar en sql.
        """El cambio de nombre se debe a que los encabezados en la pagina de pemex son diferentes
            a los de la tabla creada para almacenar la informacion en sql, si los nombres de la tabla
            son diferentes el codigo devolvera una excepcion."""
        
        # -- Cambio de nombres de: Pemex -> Sql 
        mapeo_columnas = {
            'Fecha de operación': 'Fecha_de_operacion',
            'Permiso CRE': 'Permiso_CRE',
            'Comprobante de carga': 'Comprobante_de_carga',
            'Remisión': 'Remision',
            'Producto': 'Producto',
            'Volumen comprobante de carga(lts)': 'Volumen_comprobante_de_carga',
            'Volumen total de factura(lts)': 'Volumen_total_de_factura',
            'Volumen a restituir (lts)': 'Volumen_a_restituir',
            'Cliente': 'Cliente',
            'Destino': 'Destino'
        }

        # -- Con el diccionario anterior se renombrar columnas en el DataFrame y se establece el tipo de dato para cada columna.
        df.rename(columns=mapeo_columnas, inplace=True)
        df['Fecha_de_operacion'] = pd.to_datetime(df['Fecha_de_operacion'], dayfirst= True)
        df['Fecha_de_operacion'] = df['Fecha_de_operacion'].dt.strftime("%Y-%m-%d")
        df['Permiso_CRE'] = df['Permiso_CRE'].astype(str)
        df['Comprobante_de_carga'] = df['Comprobante_de_carga'].astype(str)
        df['Remision'] = df['Remision'].astype(str)
        df['Producto'] = df['Producto'].astype(str)
        df['Volumen_comprobante_de_carga'] = df['Volumen_comprobante_de_carga'].apply(lambda x: float(x.replace(',', '')) if x.replace(',', '').replace('.', '').isdigit() else None)
        df['Volumen_total_de_factura'] = df['Volumen_total_de_factura'].apply(lambda x: float(x.replace(',', '')) if x.replace(',', '').replace('.', '').isdigit() else None)
        df['Volumen_a_restituir'] = df['Volumen_a_restituir'].apply(lambda x: float(x.replace(',', '')) if x.replace(',', '').replace('.', '').isdigit() else None)
        df['Cliente'] = df['Cliente'].astype(str)
        df['Destino'] = df['Destino'].astype(str)

        # -- Ahora, los nombres de las columnas en el DataFrame coinciden con los de la tabla SQL Server
        # -- Agregar datos a la tabla Volumen_Restituido en SQL Server
        tabla_destino = 'Volumen_Restituido_Petro'
        for index, row in df.iterrows():
            # -- Construir la consulta de inserción
            query = f"""INSERT INTO {tabla_destino} 
                (Fecha_de_operacion, 
                Permiso_CRE, 
                Comprobante_de_carga, 
                Remision, 
                Producto, 
                Volumen_comprobante_de_carga, 
                Volumen_total_de_factura, 
                Volumen_a_restituir, 
                Cliente, 
                Destino) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""
            
            # -- Ejecutar la consulta con los valores de la fila actual.
            cursor.execute(query, tuple(row))

        # -- Elimina los registros duplicados (Si existen)  
        query_3 = ("""with C as (select  id, comprobante_de_carga, Remision, ROW_NUMBER() 
                   over (PARTITION BY comprobante_de_carga ORDER BY comprobante_de_carga desc) 
                   AS DUPLICADO FROM Volumen_Restituido) 
                   DELETE FROM C WHERE DUPLICADO >1""")
        
        cursor.execute(query_3)

        # -- Confirmar los cambios en la base de datos
        conn.commit()

# ------ Inicio de la navegacion en el portal de Pemex------ 

# -- Se crea un bucle infinito para intentar conectar a pemex. 
while True:
    # -- Pagina de inicio de pemex
    pagina_de_inicio = 'https://www.comercialrefinacion.pemex.com/portal/'
    # -- Pagina del volumenrestituido. 
    pagina_volumen_restituido = 'https://www.comercialrefinacion.pemex.com/portal/sccli040/controlador?Destino=sccli040_01.jsp#'
    # -- El navegador se dirige a la pagina de inicio e ingresa los nombres de usuario y contraseñas.
    driver.get(pagina_de_inicio)
    driver.find_element(By.NAME,'usuario').send_keys(config('usuario_Pmx'))
    driver.find_element(By.NAME,'contrasena').send_keys(config('contrasena_pmx'))
    # -- Una vez igresadas las contraseñas preciona el boton de entrar
    driver.find_element(By.NAME,'botonEntrar').send_keys(Keys.ENTER)

    # -- Realiza la busqueda del elemento. 
    """Este elmento solo aparece hasta que se realizo el login en la pagina. El bucle seguira intentando
        acceder a la pagina hasta que se haga precente el elemento o hasta que sea detenido"""        
    try:
        nombre_user_activo_pmx = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.CLASS_NAME, 'textoEjecutivo')))
        # -- Una vez precente el texto sale del bucle infinito y continua con el codigo. 
        break
    except:
        # -- Inidica que no su pudo acceder y vuelve a intentarlo.
        print('Usuario ocupado, reintentando.')
        pass

# -- Se crea un ciclo con el que obtendrá informacion de cada fecha. 
"""El ciclo iniciara con la fecha obtenida de la variable  'fecha_inicial' a partir de ahí
se repetira el codigo hasta llegar a la fecha actual menos 1 dia, representada en la 
variable 'fecha_final'."""


for i in range((fecha_final - fecha_inicial).days + 1):
    # -- Se crea la variable 'fecha_a_validar'. 
    """ Donde a la fecha inicial se le va a sumar el numero de dias dependiendo del indice. 'i' hasta que 
        sea igual a el valor de la variable 'fecha_final'."""
    fecha_a_validar = fecha_inicial + timedelta(days=i)
    # -- Se obtiene el mes en formato de texto ejemplo: 'Abril' con la primera letra mayuscula.
    mes = fecha_a_validar.strftime('%B').capitalize()
    # -- Se obtiene el dia como entero. 
    dia = int(fecha_a_validar.day)
    # -- Driver se dirige a la pagina de volumen restituido.
    driver.get(pagina_volumen_restituido)
    # -- Establecemos la ventana de volumen restituido como la ventana principal.
    ventana_original = driver.current_window_handle
    # -- Se imprime el dia con el que se esta consultando para depurar el codigo. (Opcional) 
    print(f"Trabajando con la fecha: {fecha_a_validar}, mes: {mes}, dia: {dia} .")
    # -- Abre el calendario de la fecha inicial en la pagina de pemex. 
    """Es el icono del calendario donde se selecciona la fecha inicial de la busqueda en la pagina de pemex,
        este calendario se abre en una pagina nueva."""
    driver.find_element(By.XPATH,"//img[@src='/portal/imagenes/calendario.gif']").click()
    # -- Cambia a la pagina que se abrio al momento de hacer clic en el icono del calendario
    driver.switch_to.window(driver.window_handles[1])
    # -- Se accede a la lista desplegable del mes. 
    """Con la variable 'select_mes' se guarda la informacion del elemento html que guarda la lista desplegable"""
    select_mes = Select(driver.find_element(By.NAME, "selMonth"))
    # -- El elemento se cambia por el mes correspondiente a la variable 'mes'
    select_mes.select_by_visible_text(mes)
    # -- Se busca el elemento correspondiente a el dia.
    """Donde el elemento sea igual a el dia segun la variable 'dia'. """
    driver.find_element(By.LINK_TEXT,str(dia)).click()
    # -- Cambio de ventana a la ventana principal
    """Una vez seleccionado el dia la ventana del calendario se cierra automaticamente
        pero la informacion de la ventana actual sigue almacenada, hay que indicarle a el 
        navegador que vamos a cambiar de ventana para continuar ejecutando el codigo."""
    # -- Se cambia a la ventana principal
    driver.switch_to.window(ventana_original)
    # -- Abre el calendario de la fecha final en la pagina de pemex. 
    """Es el icono del calendario donde se selecciona la fecha final de la busqueda en la pagina de pemex,
        este calendario se abre en una pagina nueva."""
    driver.find_element(By.XPATH,"(//img[@src='/portal/imagenes/calendario.gif'])[2]").click()
    # -- Cambia a la pagina que se abrio al momento de hacer clic en el icono del calendario
    driver.switch_to.window(driver.window_handles[1])
    # -- Se accede a la lista desplegable del mes. 
    """Con la variable 'select_mes' se guarda la informacion del elemento html que guarda la lista desplegable"""
    select_mes = Select(driver.find_element(By.NAME, "selMonth"))
    # -- El elemento se cambia por el mes correspondiente a la variable 'mes'
    select_mes.select_by_visible_text(mes)
    # -- Se busca el elemento correspondiente a el dia.
    """Donde el elemento sea igual a el dia segun la variable 'dia'. """
    driver.find_element(By.LINK_TEXT,str(dia)).click()
    # -- Cambio de ventana a la ventana principal
    """Una vez seleccionado el dia la ventana del calendario se cierra automaticamente
        pero la informacion de la ventana actual sigue almacenada, hay que indicarle a el 
        navegador que vamos a cambiar de ventana para continuar ejecutando el codigo."""
    # -- Se cambia a la ventana principal
    driver.switch_to.window(ventana_original)
    # -- Da clic en el boton consultar. 
    """Una vez seleccionados los dias a consultar se selecciona el boton de la pagina que realiza la consulta."""
    driver.find_element(By.XPATH,"//input[@value='Consultar']").click()
    # -- Se ejecuta la funcion 
    """Esta funcion se explica linesas arriba"""
    verificar_elemento()

    # ------ A partir de esta parte se procede con el cierre de sesion ------
    """Se crea un bucle infinito para proceder con el cierre de la sesion en pemex"""
while True:
    # -- Busca el elemento de pemex para hacer logout
    try:
        # -- Busca el elemento y da clic en el.
        driver.find_element(By.XPATH,"//ul[@id='nav']/li[4]/a[1]").click()
        # -- Validación de el cierre de sesion. 
        """Si la sesion se cerro correctamente debe de aparecer en la pagina de pemex la pagina de inicio donde se ingresan las contraseñas. 
        en esta pagina debe de haber un elemento contraseña. Se busca que este elemento este visible en pantalla. """
        validacion = WebDriverWait(driver, 2).until(EC.presence_of_element_located((By.XPATH,"//p[text()=' Contraseña : ']")))

        """Si el elemento esta visible quiere decir que la pagina cerro la sesion."""
        if validacion.text == 'Contraseña :':
            # -- Imprime un mensaje de cierre de sesion. (Opcional)
            # print('Cierre de sesión completado con exito')
            # -- Si cerro la sesion sale del bucle infinito.
            break
        else:
            # -- Si no, imprime y repite. 
            print('No se ha podido cerrar la sesion')
            break
    except:
        pass

# -- Al terminar de ejecutar todo el codigo, cierra el driver.
driver.quit()
    # -- Cierrar la conexión a SQL Server
conn.close()
